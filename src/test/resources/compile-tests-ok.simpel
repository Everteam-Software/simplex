# NOTE: The "==" line serves as a separator between test cases.

#=============================================================
# Basic receive / reply
#

process ReceiveReply {
  receive(my_pl, start_op, msg_in) {
    reply(msg_in)
  }
}

#=============================================================
# Basic async receive / invoke
#

process ReceiveInvoke {
  msg_in = receive(my_pl, start_op)
  invoke(other_pl, other_op, msg_in)
}

#=============================================================
# Scope with alarm
#

process ScopeAlarm {
  msg_in = receive(my_pl, start_op)
  scope {
    wait([PT59S])
  } alarm([PT60S]) {
    exit
  }
}

#=============================================================
# Scope with event
#

process ScopeAlarm {
  msg_in = receive(my_pl, start_op)
  scope {
    wait([PT60S])
  } event(stop_pl, stop, msg) {
    exit
  }
}

#=============================================================
# Scope with compensate
#

process ScopeAlarm {
  msg_in = receive(my_pl, start_op)
  scope {
    wait([PT60S])
  } compensation {
    invoke(pl, op, msg)
  }
}

#=============================================================
# Scope with everything
#

process ScopeAll {
  msg_in = receive(my_pl, start_op)
  scope {
    wait([PT60S])
  } alarm([PT60S]) {
    exit
  } event(stop_pl, stop, msg) {
    exit
  } compensation {
    invoke(pl, op, msg)
  }
}

#=============================================================
# Hello World (basic assignment)
#

process HelloWorld {
  receive(my_pl, hello_op, msg_in) {
    msg_out = msg_in + " World"
    reply(msg_out)
  }
}

#=============================================================
# Try / catch / catch all
#

process TryCatch {
  msg_in = receive(my_pl, start_op)
  try {
    invoke(other_pl, other_op, msg_in)
  } catch(SomeFault f1) {
    invoke(fault_pl, inform_f1, f1)
  } catch(OtherFault f2) {
    invoke(fault_pl, inform_f2, f2)
  } catch(unknown) {
    invoke(fault_pl, inform_unknown_fault, unknown)
  }
}

#=============================================================
# External Counter
#

function myFunc(p1, p2) {
   return (p1 + p2 < 10);
}
process ExternalCounter {
  receive(my_pl, start_op, msg_in) {
    resp = <root><count start="0">0</count></root>
    while(resp < 10) {
      invoke(partner_pl, partner_start_op, msg_in)
      resp = receive(partner_pl, partner_reply_op)
    }
    reply(resp)
  }
}
